class Node:
    def __init__(self, info): 
        self.info = info  
        self.left = None  
        self.right = None 
        self.level = None 

    def __str__(self):
        return str(self.info) 

class BinarySearchTree:
    def __init__(self): 
        self.root = None

    def create(self, val):  
        if self.root == None:
            self.root = Node(val)
        else:
            current = self.root
         
            while True:
                if val < current.info:
                    if current.left:
                        current = current.left
                    else:
                        current.left = Node(val)
                        break
                elif val > current.info:
                    if current.right:
                        current = current.right
                    else:
                        current.right = Node(val)
                        break
                else:
                    break
from queue import deque
"""
Node is defined as
self.left (the left child of the node)
self.right (the right child of the node)
self.info (the value of the node)
"""
def levelOrder(root):
    if (not root):
        return
 
    q = []
    q.append(root)
 
    while (len(q)):
 
        # number of nodes at current level
        n = len(q)
 
        # Traverse all nodes of current level
        for i in range(1, n + 1):
            temp = q[0]
            q.pop(0)
 
            # Print the left most element
            # at the level
            if (i == 1):
                print(temp.info)
 
            # Add left node to queue
            if (temp.left != None):
                q.append(temp.left)
 
            # Add right node to queue
            if (temp.right != None):
                q.append(temp.right)
    
def rightView(root):
      
    if root is None:
        return
  
    q = deque()
    q.append(root)
  
    while q:
          
        # Get number of nodes for each level
        n = len(q)
  
        # Traverse all the nodes of the 
        # current level
  
        while n > 0:
            n -= 1
              
            # Get the front node in the queue
            node = q.popleft()
  
            # Print the last node of each level
            if n == 0:
                print(node.info)
  
            # If left child is not null push it 
            # into the queue
            if node.left:
                q.append(node.left)
  
            # If right child is not null push
            # it into the queue
            if node.right:
                q.append(node.right)


tree = BinarySearchTree()
t = int(input())

arr = list(map(int, input().split()))

for i in range(t):
    tree.create(arr[i])

levelOrder(tree.root)
print('')
rightView(tree.root)
